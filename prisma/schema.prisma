// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique @db.VarChar(255)
  files           File[]
  chargeSessions  ChargeSession[]
  privateStations PrivateStation[]
  favoriteStations PublicStation[]

  @@map("users")
}

model File {
    id              Int       @id @default(autoincrement())
    name            String
    uuid            String
    type            String
    path            String
    createdAt       DateTime  @default(now())
    createdBy       User      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
    createdById     Int
    chargeSession   ChargeSession? @relation(name:"ChargeSessionFile")
    chargeSessionId Int?
    
    @@map("files")
}

model ChargeSession {
  id          Int  @id @default(autoincrement())
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  connector   ChargeConnector @relation(fields: [connectorId], references: [id])
  connectorId Int
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  Int
  description String?
  extraFees   Float
  startTime   String?
  endTime     String?
  kwh         Float
  price       Float
  invoice     File? @relation("ChargeSessionFile", fields: [invoiceId], references: [id])
  invoiceId   Int?  @unique

  @@map("chargeSession")
}

model Station {
  id              Int @id @default(autoincrement())
  name            String
  city            String?
  street          String?
  streetNumber    Int?
  houseNumber     Int?
  connectors      ChargeConnector[]
  public          PublicStation? @relation("StationPublicStation")
  publicId        Int? 
  private         PrivateStation? @relation("StationPrivateStation")
  privateId       Int?

  @@map("stations")
}

model PublicStation {
  id              Int @id @default(autoincrement())
  station         Station @relation("StationPublicStation", fields: [stationId], references: [id])
  stationId       Int @unique
  provider        Provider? @relation(fields: [providerId], references: [id])
  providerId      Int?
  favorited       User[] 

  @@map("publicStations")
}

model PrivateStation {
  id              Int @id @default(autoincrement())
  station         Station @relation("StationPrivateStation", fields: [stationId], references: [id])
  stationId       Int @unique
  user            User? @relation(fields: [userId], references: [id])
  userId          Int?
 
  @@map("privateStations")
}

model ChargeConnector {
  id              Int @id @default(autoincrement())
  dc              Boolean
  name            String?
  chargeSessions  ChargeSession[]
  station         Station @relation(fields: [stationId], references: [id])
  stationId       Int
  tariffs         ChargeTariff[]

  @@map("chargeConnectors")
}

model ChargeTariff {
  id              Int @id @default(autoincrement())
  name            String?
  validFrom DateTime
  validTo DateTime?
  times ChargeTariffTime[]
  connector ChargeConnector @relation(fields: [connectorId], references: [id])
  connectorId Int

  @@map("chargeTariffs")
}

model ChargeTariffTime {
  id        Int @id @default(autoincrement())
  days      Int[]
  from      String
  to        String
  price     Float
  tariff    ChargeTariff @relation(fields: [tariffId], references: [id])
  tariffId  Int

  @@map("chargeTariffTimes")
}

model Provider {
  id              Int @id @default(autoincrement())
  name            String
  description     String?
  stations        PublicStation[]
  chargeSessions  ChargeSession[]

  @@map("providers")
}
